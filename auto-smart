import re
import numpy as np
import ipywidgets as widgets
from IPython.display import display

# === Input widgets ===
input_box = widgets.Textarea(
    value='',
    placeholder='Paste your region data here...',
    description='Input:',
    layout=widgets.Layout(width='100%', height='300px'),
    style={'description_width': 'initial'}
)

# Optional: Custom name for the output region
name_box = widgets.Text(
    value='AVERAGE_',
    placeholder='Enter name prefix (e.g., SRUBNAYA_)',
    description='Output Name:',
    layout=widgets.Layout(width='50%'),
    style={'description_width': 'initial'}
)

output_box = widgets.Output()

# === Main logic ===
def calculate_weighted_vector(b):
    output_box.clear_output()
    text = input_box.value.strip()
    custom_name = name_box.value.strip().upper().replace(" ", "_")

    weighted_vectors = []
    weights = []

    for line in text.splitlines():
        if not line.strip():
            continue
        try:
            # Match name and weight
            name_match = re.match(r'^(.+?)_\(N=(\d+)\),', line)
            if not name_match:
                continue

            n = int(name_match.group(2))
            vector_str = line.split(',', 1)[1]
            vector = list(map(float, vector_str.strip().split(',')))

            weighted_vectors.append(np.array(vector) * n)
            weights.append(n)
        except Exception as e:
            with output_box:
                print(f"❌ Error processing line: {line}")
                print(f"   {e}")
            return

    if weighted_vectors and weights:
        total_weight = sum(weights)
        summed_vector = sum(weighted_vectors)
        weighted_avg_vector = summed_vector / total_weight

        # Format output
        formatted_vector = ",".join(f"{x:.8f}" for x in weighted_avg_vector)
        result_line = f"{custom_name}__(N={total_weight}),{formatted_vector}"

        with output_box:
            print(result_line)
    else:
        with output_box:
            print("❌ No valid data found. Please check your input format.")

# === Button to run ===
calc_button = widgets.Button(description="Calculate Weighted Average")
calc_button.on_click(calculate_weighted_vector)

# === Display widgets ===
display(input_box, name_box, calc_button, output_box)
